# IMPORTANT: Please export the wandb ID that you want to resume from before running this script
#       i.e. export WANDB_ID=<run-ID>
# Then, launch it via
#     bash resume.sh
apiVersion: batch/v1
kind: Job
metadata:
  name: resume-${WANDB_ID}-1
  namespace: deep-forecast
spec:
  template:
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/region
                operator: In
                values:
                  - us-west
              - key: nvidia.com/gpu.product
                operator: In
                values:
                  - Quadro-RTX-8000
                  - NVIDIA-GeForce-GTX-1080-Ti
                  - NVIDIA-GeForce-RTX-3090
              #- key: kubernetes.io/hostname
              #  operator: In
              #  values:
              #    - uicnrp-fiona.evl.uic.edu
      volumes:   # Persistent storage
        - name: oisst-daily
          persistentVolumeClaim:
            claimName: oisst-daily
        - name: git-repo
          emptyDir: {}
      initContainers:
        - name: clone-git-repo
          image: alpine/git
          env:    # Environment variables
            # The git secrets can be saved via
            # kubectl create secret generic github-secret --from-literal=user=<USERNAME> --from-literal=token=<ACCESS-TOKEN>
            - name: GIT_USERNAME   # GitHub username
              valueFrom:
                secretKeyRef:
                  name: github-secret
                  key: user
            - name: GIT_PASSWORD  # GitHub Access Token
              valueFrom:
                secretKeyRef:
                  name: github-secret
                  key: token
          args:
            - clone
            - --single-branch
            - --
            - https://$(GIT_USERNAME):$(GIT_PASSWORD)@github.com/salvaRC/convex-diffusion.git
            - /convex_diffusion/code
          volumeMounts:
            - name: git-repo
              mountPath: /convex_diffusion
      containers:
        - name: run-on-gpu
          # image: pytorch/pytorch:1.12.0-cuda11.3-cudnn8-runtime
          # image: gitlab-registry.nautilus.optiputer.net/prp/jupyter-stack/tensorflow
          # image: gitlab-registry.nautilus.optiputer.net/prp/jupyter-stack/prp
          image: gitlab-registry.nrp-nautilus.io/salvarc/climate-ml:latest
          workingDir: /convex_diffusion/code
          command: [ "/bin/bash","-c" ]
          args: [
                "
                echo Reloading from WANDB_ID=${WANDB_ID};
                python run.py logger.wandb.id=${WANDB_ID} datamodule.data_dir=/convex_diffusion/data/oisst-daily
                "
          ]
          volumeMounts:
            - name: oisst-daily
              mountPath: /convex_diffusion/data/oisst-daily
            - name: git-repo
              mountPath: /convex_diffusion
          resources:
            limits:
              nvidia.com/gpu: "1"
              memory: "90G"
              cpu: "4"
            requests:
              nvidia.com/gpu: "1"
              memory: "70G"
              cpu: "4"
      restartPolicy: Never
  backoffLimit: 0
  # The backoffLimit field specifies how many times your pod will run in case the exit status of your script is not 0
  #   or if pod was terminated for a different reason (for example a node was rebooted).
  #   It's a good idea to have it more than 0.